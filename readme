cat.c - concatenate files and print to stdout using low-level system calls via syscall() provided by glibc

echo.c - write arguments to stdout using low-level system calls bypassing libc via direct svc instructions to the kernel

sleep.c - suspend execution for a specified number of seconds by directly invoking the nanosleep syscall using inline assembly without relying on libc

false.c - do nothing unsuccessfully by directly invoking the kernel exit syscall with status 1 using inline assembly and bypassing libc entirely

true.c - do nothing successfully by directly invoking the kernel exit syscall with status 0 using inline assembly and bypassing libc entirely

bridge.c - bridge between raw syscalls and the POSIX shell allowing scripts to access any syscall by number and arguments

tty.c - print the file name of the terminal connected to standard input using inline assembly

shell.c - minimalist shell that cycles through reading, forking, executing and waiting using only raw syscalls and inline assembly (commands with arguments achived by spliting the input line into tokens and building an array that is passed to execve which expects the first element to be the command and the rest to be the arguments ending with a NULL pointer)
